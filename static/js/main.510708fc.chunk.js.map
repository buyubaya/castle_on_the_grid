{"version":3,"sources":["components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Grid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","size","grid","startCell","endCell","p","blocks","isStart","_start","bind","assertThisInitialized","_find","_reset","handleClickCell","_initGrid","i","j","push","setState","currentCell","concat","toConsumableArray","queue","prev","defineProperty","length","slice","a","_findValidCell","_isFound","len","_trace","_getPath","loc","_this2","tmp","forEach","d","newI","newJ","newCost","_isValidCell","fmLoc","stack","checked","pop","key","k","indexOf","locs","end","fL","map","x","cell","_getDirectionByCell","_this$state","startRadio","endRadio","blockRadio","filter","item","_this$state2","_minimumMoves","_this3","sizeInput","value","_this4","_this$state3","styles","width","height","react_default","createElement","className","ref","el","type","defaultValue","onClick","style","row","name","defaultChecked","Component","App","components_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.510708fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Grid extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            size: 8,\r\n            grid: [],\r\n            startCell: null,\r\n            endCell: null,\r\n            p: {},\r\n            blocks: [],\r\n            isStart: false\r\n        };\r\n\r\n        this._start = this._start.bind(this);\r\n        this._find = this._find.bind(this);\r\n        this._reset = this._reset.bind(this);\r\n        this.handleClickCell = this.handleClickCell.bind(this);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this._initGrid(8);\r\n    }\r\n\r\n    _initGrid(size){\r\n        let grid = [];\r\n\r\n        for(let i=0; i < size; i++){\r\n            grid[i] = [];\r\n            for(let j=0; j < size; j++){\r\n                grid[i].push('.');\r\n            }\r\n        }\r\n        \r\n        // grid[3][4] = null;\r\n        // grid[4][4] = null;\r\n        // grid[5][4] = null;\r\n        // grid[6][5] = null;\r\n        // grid[7][5] = null;\r\n\r\n        this.setState({ grid });\r\n    }\r\n\r\n    _minimumMoves(grid, startCell, endCell){\r\n        let currentCell = [...startCell, 0];\r\n        let queue = [currentCell];\r\n        let prev = {\r\n            [`${currentCell[0]}_${currentCell[1]}`]: [currentCell]\r\n        };\r\n\r\n        while(queue.length > 0){\r\n            currentCell = queue[0];\r\n            queue = queue.slice(1);\r\n            const a = this._findValidCell(grid, currentCell, prev);\r\n            if(!this._isFound(a, endCell)){\r\n                for(let i=0, len=a.length; i < len; i++){\r\n                    queue.push(a[i]);\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        const p = this._trace(prev, endCell);\r\n        return this._getPath(prev, p);\r\n    }\r\n\r\n    _findValidCell(grid, loc, prev){\r\n        let tmp = [];\r\n        const dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\r\n\r\n        dirs.forEach(d => {\r\n            const newI = loc[0] + d[0];\r\n            const newJ = loc[1] + d[1];\r\n            const newCost = loc[2] + 1;\r\n\r\n            if(this._isValidCell(grid, [newI, newJ])){\r\n                const fmLoc = `${newI}_${newJ}`;\r\n                if(prev[fmLoc]){\r\n                    if(newCost < prev[fmLoc][2]){\r\n                        prev[fmLoc] = [[loc[0], loc[1], newCost]];\r\n                    }\r\n                    else if(newCost === prev[fmLoc][0][2]){\r\n                        prev[fmLoc].push([loc[0], loc[1], newCost]);\r\n                    }\r\n                }\r\n                else {\r\n                    tmp.push([newI, newJ, newCost]);\r\n                    prev[fmLoc] = [[loc[0], loc[1], newCost]];\r\n                }\r\n            }\r\n        });\r\n        \r\n        return tmp;\r\n    }\r\n\r\n    _trace(prev, endCell){\r\n        let tmp = [endCell];\r\n        let stack = [endCell];\r\n        let checked = [`${endCell[0]}_${endCell[1]}`];\r\n        \r\n        while(stack.length > 0){\r\n            const currentCell = stack.pop();\r\n            const key = `${currentCell[0]}_${currentCell[1]}`;\r\n\r\n            for(let i=0, len=prev[key].length; i<len; i++){\r\n                const k = `${prev[key][i][0]}_${prev[key][i][1]}`;\r\n                if(checked.indexOf(k) < 0){\r\n                    tmp.push(prev[key][i]);\r\n                    stack.push(prev[key][i]);\r\n                    checked.push(k);\r\n                }\r\n            }\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\r\n    _isValidCell(grid, loc){\r\n        if(\r\n            loc[0] >= 0 && loc[0] < grid.length &&\r\n            loc[1] >= 0 && loc[1] < grid.length &&\r\n            grid[loc[0]][loc[1]] !== null\r\n        ){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    _isFound(locs, end){\r\n        const fL = `${end[0]}_${end[1]}`;\r\n        const tmp = locs.map(x => `${x[0]}_${x[1]}`);\r\n        if(tmp[fL]){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    _getDirectionByCell(prev, cell){\r\n        let tmp = [];\r\n        const key = `${cell[0]}_${cell[1]}`;\r\n\r\n        for(let i=0, len=prev[key].length; i<len; i++){\r\n            if(cell[0] - prev[key][i][0] === 0){\r\n                if(cell[1] - prev[key][i][1] < 0){\r\n                    tmp.push('LEFT');\r\n                }\r\n                if(cell[1] - prev[key][i][1] > 0){\r\n                    tmp.push('RIGHT');\r\n                }\r\n            }\r\n            if(cell[1] - prev[key][i][1] === 0){\r\n                if(cell[0] - prev[key][i][0] < 0){\r\n                    tmp.push('UP');\r\n                }\r\n                if(cell[0] - prev[key][i][0] > 0){\r\n                    tmp.push('DOWN');\r\n                }\r\n            }    \r\n        }\r\n        \r\n        return tmp;\r\n    }\r\n\r\n    _getPath(prev, p){\r\n        let tmp = {};\r\n\r\n        for(let i=0, len=p.length; i<len; i++){\r\n            const key = `${p[i][0]}_${p[i][1]}`;\r\n            tmp[key] = this._getDirectionByCell(prev, p[i]);\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\r\n    handleClickCell(cell){\r\n        let { grid, blocks } = this.state;\r\n\r\n        if(this.startRadio.checked){\r\n            this.setState({ startCell: cell });\r\n        }\r\n\r\n        if(this.endRadio.checked){\r\n            this.setState({ endCell: cell });\r\n        }\r\n\r\n        if(this.blockRadio.checked){\r\n            if(grid[cell[0]][cell[1]] === null){\r\n                grid[cell[0]][cell[1]] = '.';\r\n                blocks = blocks.filter(item => item !== `${cell[0]}_${cell[1]}`);\r\n            }\r\n            else {\r\n                grid[cell[0]][cell[1]] = null;\r\n                blocks.push(`${cell[0]}_${cell[1]}`);\r\n            }\r\n            this.setState({ grid, blocks });\r\n        }\r\n    }\r\n\r\n    _find(){\r\n        const { grid, startCell, endCell } = this.state;\r\n        const p = this._minimumMoves(grid, startCell, endCell);\r\n        this.setState({ p });\r\n    }\r\n\r\n    _start(){\r\n        this.setState(\r\n            { isStart: true, size: this.sizeInput.value || 8 },\r\n            () => this._initGrid(this.sizeInput.value || 8)\r\n        );\r\n    }\r\n\r\n    _reset(){\r\n        this.setState({\r\n            size: 8,\r\n            grid: [],\r\n            startCell: null,\r\n            endCell: null,\r\n            p: {},\r\n            blocks: [],\r\n            isStart: false\r\n        });\r\n    }\r\n\r\n\trender() {\r\n        const { isStart, grid, size, startCell, endCell, p, blocks } = this.state;\r\n        const styles = {\r\n            grid: {\r\n                width: size * 50\r\n            },\r\n            cell: {\r\n                width: 50,\r\n                height: 50\r\n            }\r\n        };\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"grid-wrapper\">\r\n                {\r\n                    <div className={isStart ? 'form-start-area isHidden' : 'form-start-area'}>\r\n                        <div className='sizeNumber'>\r\n                            <input ref={el => this.sizeInput = el} type='text' defaultValue={8} />\r\n                        </div>\r\n                        <button className='btn-start' onClick={this._start}>Start</button>\r\n                    </div>\r\n                }\r\n\t\t\t\t{\r\n                    isStart &&\r\n                    <div>\r\n                        <table className='board' style={styles.grid}>\r\n                            <tbody>\r\n                            {\r\n                                grid.map((row, i) =>\r\n                                    <tr key={i}>\r\n                                        {\r\n                                            row.map((cell, j) => {\r\n                                                const key = `${i}_${j}`;\r\n\r\n                                                return(\r\n                                                    <td \r\n                                                        key={j}\r\n                                                        className={blocks.indexOf(key) > -1 ? 'cell isNull' : 'cell'} \r\n                                                        style={styles.cell}\r\n                                                        onClick={() => this.handleClickCell([i, j])}\r\n                                                    >\r\n                                                        {\r\n                                                            startCell && i === startCell[0] && j === startCell[1] &&\r\n                                                            <span className='startCell'></span>\r\n                                                        }\r\n                                                        {\r\n                                                            endCell && i === endCell[0] && j === endCell[1] &&\r\n                                                            <span className='endCell'></span>\r\n                                                        }\r\n                                                        {\r\n                                                            p[key] && p[key].indexOf('DOWN') > -1 &&\r\n                                                            <span className='line-up'></span>\r\n                                                        }\r\n                                                        {\r\n                                                            p[key] && p[key].indexOf('UP') > -1 &&\r\n                                                            <span className='line-down'></span>\r\n                                                        }\r\n                                                        {\r\n                                                            p[key] && p[key].indexOf('RIGHT') > -1 &&\r\n                                                            <span className='line-left'></span>\r\n                                                        }\r\n                                                        {\r\n                                                            p[key] && p[key].indexOf('LEFT') > -1 &&\r\n                                                            <span className='line-right'></span>\r\n                                                        }\r\n                                                    </td>\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                    \r\n                        <div className='options-area'>\r\n                            <div className='radio-area'>\r\n                                <div className='input-radio start'>\r\n                                    <label>\r\n                                        <input type='radio' name='cellType' className='cellType' defaultChecked={true} ref={el => this.startRadio = el} />\r\n                                        <span>Start Point</span>  \r\n                                    </label>\r\n                                </div>\r\n                                <div className='input-radio end'>\r\n                                    <label>\r\n                                        <input type='radio' name='cellType' className='cellType' ref={el => this.endRadio = el} />\r\n                                        <span>End Point</span>\r\n                                    </label>\r\n                                </div>\r\n                                <div className='input-radio block'>\r\n                                    <label>\r\n                                        <input type='radio' name='cellType' className='cellType' ref={el => this.blockRadio = el} />\r\n                                        <span>Block</span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className='btn-area'>\r\n                                <button className='btn-find' onClick={this._find}>Find Path</button>\r\n                                <button className='btn-reset' onClick={this._reset}>Reset</button>\r\n                            </div>\r\n                        </div>  \r\n                    </div>\r\n                }\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Grid;\r\n","import React, { Component } from 'react';\r\nimport Grid from './components/Grid';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Grid />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}